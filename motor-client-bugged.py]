import RPi.GPIO as GPIO
import time
import requests

GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)

DirRV=17 # GPIO 17 is pin 11
PwmRV=27 # GPIO 27 is pin 13
GPIO.setup(PwmRV,GPIO.OUT)
GPIO.setup(DirRV,GPIO.OUT)
rv=GPIO.PWM(PwmRV,100)

DirR=22 # pin 15
PwmR=10 # pin 19
GPIO.setup(DirR,GPIO.OUT)
GPIO.setup(PwmR,GPIO.OUT)
r=GPIO.PWM(PwmR,100)

DirL=9 # 21
PwmL=11 # 23
GPIO.setup(DirL,GPIO.OUT)
GPIO.setup(PwmL,GPIO.OUT)
l=GPIO.PWM(PwmL,100)

DirLV=5 # 29
PwmLV=6 # 31
GPIO.setup(DirLV,GPIO.OUT)
GPIO.setup(PwmLV,GPIO.OUT)
lv=GPIO.PWM(PwmLV,100)

def RV(w):
    if(w<=0):
        GPIO.output(DirRV,GPIO.HIGH)
        rv.start(abs(w))
    if(w>0):
        GPIO.output(DirRV,GPIO.LOW)
        rv.start(abs(w))

def R(x):
    if(x<=0):
        GPIO.output(DirR,GPIO.HIGH)
        r.start(abs(x))
    if(x>0):
        GPIO.output(DirR,GPIO.LOW)
        r.start(abs(x))

def LV(y):
    if(y>=0):
        GPIO.output(DirLV,GPIO.HIGH)
        lv.start(abs(y))
    if(y<0):
        GPIO.output(DirLV,GPIO.LOW)
        lv.start(abs(y))
def L(z):
    if(z<=0):
        GPIO.output(DirL,GPIO.HIGH)
        l.start(abs(z))
    if(z>0):
        GPIO.output(DirL,GPIO.LOW)
        l.start(abs(z))

speed = 45
speed2 = 82
# for i in range (5):
    # RV(speed)
    # time.sleep(5)
    # RV(0)
    # time.sleep(1)
    # R(speed)
    # time.sleep(5)
    # R(0)
    # time.sleep(1)
    # LV(speed)
    # time.sleep(5)
    # LV(0)
    # time.sleep(1)
    # L(speed)
    # time.sleep(5)
    # L(0)
    # time.sleep(1)

# 60 messages/second
timestep = 1.0/60.0
running = True
while (running):
    response = requests.get("http://10.42.0.1:5000/controller")
    response = response.json()
    print(response)
    #response [x (-1,1), y (-1,1), lt (0,1), rt (0,1), a (0 or 1), b (0 or 1)]
    new_code = False
    if (new_code):
	    x, y = 0, 0
	    if (abs(response[0]) >= 0.5):
	    	x = response[0]
	    if (abs(response[1]) >= 0.5):
	    	y = response[1]
	    	
	    xySpd = -response[3]
	    #reversing overrides forward trigger
	    if (response[2] >= 0.2): xySpd = response[2]
	    xySpd *= 100
	    if (abs(xySpd) <= 0.2): xySpd = 0
	    print(xySpd, x, y)
	    #L is R and R is L
	    if (abs(x) > 0.25): #we turning
	    	L(xySpd)
	    	R(xySpd)
	    else: #go straight forward or backwards
	    	print("forward backward", -xySpd)
	    	L(0)
	    	R(-xySpd)
	    	
	    #height controls
	    if (response[4]):# A pressed so we want to go up
	    	RV(100)
	    	LV(-100)
	    elif (response[5]): # B pressed (overriden by A) so we want to go down
	    	RV(-100)
	    	LV(100)
    else:
    # old code
	    L(0)
	    LV(0)
	    R(5)
	    RV(0)
    time.sleep(timestep)


RV(0)
R(0)
L(0)
LV(0)



















